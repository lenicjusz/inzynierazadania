import tkinter as tk
from tkinter import ttk

def symbolic_to_numeric(symbolic: str) -> str:
    if len(symbolic) != 9:
        raise ValueError("Symboliczny tryb musi mieć 9 znaków (np. rwxr-xr--)")
    mapping = {'r': 4, 'w': 2, 'x': 1, '-': 0}
    numeric = []

    for i in range(0, 9, 3):
        triplet = symbolic[i:i+3]
        if any(ch not in mapping for ch in triplet):
            raise ValueError("Nieprawidłowe znaki w trybie symbolicznym")
        val = sum(mapping[ch] for ch in triplet)
        numeric.append(str(val))

    return ''.join(numeric)

def numeric_to_symbolic(numeric: str) -> str:
    if len(numeric) != 3 or not numeric.isdigit():
        raise ValueError("Tryb numeryczny musi składać się z 3 cyfr (0-7)")
    if any(not (0 <= int(ch) <= 7) for ch in numeric):
        raise ValueError("Cyfry muszą być z zakresu 0–7")

    result = ''
    for val in map(int, numeric):
        result += 'r' if val & 4 else '-'
        result += 'w' if val & 2 else '-'
        result += 'x' if val & 1 else '-'
    return result

class PermissionConverterApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Konwerter uprawnień chmod")
        self.geometry("400x200")
        self.resizable(False, False)

        self.create_widgets()

    def create_widgets(self):
        ttk.Label(self, text="Symboliczny (np. rwxr-xr--):").pack(pady=(20, 5))
        self.symbolic_var = tk.StringVar()
        self.symbolic_entry = ttk.Entry(self, textvariable=self.symbolic_var, width=30)
        self.symbolic_entry.pack()

        ttk.Label(self, text="Numeryczny (np. 754):").pack(pady=(10, 5))
        self.numeric_var = tk.StringVar()
        self.numeric_entry = ttk.Entry(self, textvariable=self.numeric_var, width=30)
        self.numeric_entry.pack()

        self.status_label = ttk.Label(self, text="", foreground="red")
        self.status_label.pack(pady=(10, 5))

        self.symbolic_var.trace_add("write", self.update_from_symbolic)
        self.numeric_var.trace_add("write", self.update_from_numeric)

        self.ignore_updates = False

    def update_from_symbolic(self, *args):
        if self.ignore_updates:
            return
        symbolic = self.symbolic_var.get()
        try:
            numeric = symbolic_to_numeric(symbolic)
            self.ignore_updates = True
            self.numeric_var.set(numeric)
            self.status_label.config(text="", foreground="green")
            self.symbolic_entry.configure(background="white")
        except ValueError as e:
            self.status_label.config(text=str(e), foreground="red")
            self.symbolic_entry.configure(background="#ffdddd")
        finally:
            self.ignore_updates = False

    def update_from_numeric(self, *args):
        if self.ignore_updates:
            return
        numeric = self.numeric_var.get()
        try:
            symbolic = numeric_to_symbolic(numeric)
            self.ignore_updates = True
            self.symbolic_var.set(symbolic)
            self.status_label.config(text="", foreground="green")
            self.numeric_entry.configure(background="white")
        except ValueError as e:
            self.status_label.config(text=str(e), foreground="red")
            self.numeric_entry.configure(background="#ffdddd")
        finally:
            self.ignore_updates = False

if __name__ == "__main__":
    app = PermissionConverterApp()
    app.mainloop()
